// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClaimedFinalYield extends ethereum.Event {
  get params(): ClaimedFinalYield__Params {
    return new ClaimedFinalYield__Params(this);
  }
}

export class ClaimedFinalYield__Params {
  _event: ClaimedFinalYield;

  constructor(event: ClaimedFinalYield) {
    this._event = event;
  }

  get loanPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ClaimedLoan extends ethereum.Event {
  get params(): ClaimedLoan__Params {
    return new ClaimedLoan__Params(this);
  }
}

export class ClaimedLoan__Params {
  _event: ClaimedLoan;

  constructor(event: ClaimedLoan) {
    this._event = event;
  }

  get loanPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get claimer(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get term(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class NewBidder extends ethereum.Event {
  get params(): NewBidder__Params {
    return new NewBidder__Params(this);
  }
}

export class NewBidder__Params {
  _event: NewBidder;

  constructor(event: NewBidder) {
    this._event = event;
  }

  get loanPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get bidder(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get term(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewParticipant extends ethereum.Event {
  get params(): NewParticipant__Params {
    return new NewParticipant__Params(this);
  }
}

export class NewParticipant__Params {
  _event: NewParticipant;

  constructor(event: NewParticipant) {
    this._event = event;
  }

  get loanPool(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get participant(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LoanPoolAave extends ethereum.SmartContract {
  static bind(address: Address): LoanPoolAave {
    return new LoanPoolAave("LoanPoolAave", address);
  }

  auctionDuration(): BigInt {
    let result = super.call(
      "auctionDuration",
      "auctionDuration():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionDuration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionDuration",
      "auctionDuration():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  auctionInterval(): BigInt {
    let result = super.call(
      "auctionInterval",
      "auctionInterval():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_auctionInterval(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "auctionInterval",
      "auctionInterval():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collateralAmount(): BigInt {
    let result = super.call(
      "collateralAmount",
      "collateralAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralAmount",
      "collateralAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowRate(): BigInt {
    let result = super.call("getBorrowRate", "getBorrowRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getBorrowRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBorrowRate",
      "getBorrowRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLendingRate(): BigInt {
    let result = super.call("getLendingRate", "getLendingRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getLendingRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getLendingRate",
      "getLendingRate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolBalance(): BigInt {
    let result = super.call("getPoolBalance", "getPoolBalance():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getPoolBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPoolBalance",
      "getPoolBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTermCount(): BigInt {
    let result = super.call("getTermCount", "getTermCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getTermCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getTermCount", "getTermCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  highestBidAmount(param0: BigInt): BigInt {
    let result = super.call(
      "highestBidAmount",
      "highestBidAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_highestBidAmount(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "highestBidAmount",
      "highestBidAmount(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  highestBidder(param0: BigInt): Address {
    let result = super.call(
      "highestBidder",
      "highestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_highestBidder(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "highestBidder",
      "highestBidder(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isParticipant(param0: Address): boolean {
    let result = super.call("isParticipant", "isParticipant(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_isParticipant(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isParticipant",
      "isParticipant(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  loanAmount(param0: Address): BigInt {
    let result = super.call("loanAmount", "loanAmount(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_loanAmount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loanAmount", "loanAmount(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  maxParticipants(): BigInt {
    let result = super.call(
      "maxParticipants",
      "maxParticipants():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_maxParticipants(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "maxParticipants",
      "maxParticipants():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minimumBidAmount(): BigInt {
    let result = super.call(
      "minimumBidAmount",
      "minimumBidAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minimumBidAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minimumBidAmount",
      "minimumBidAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextAutionCloseTimestamp(): BigInt {
    let result = super.call(
      "nextAutionCloseTimestamp",
      "nextAutionCloseTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextAutionCloseTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextAutionCloseTimestamp",
      "nextAutionCloseTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nextAutionStartTimestamp(): BigInt {
    let result = super.call(
      "nextAutionStartTimestamp",
      "nextAutionStartTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextAutionStartTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextAutionStartTimestamp",
      "nextAutionStartTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  poolStartTimestamp(): BigInt {
    let result = super.call(
      "poolStartTimestamp",
      "poolStartTimestamp():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_poolStartTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "poolStartTimestamp",
      "poolStartTimestamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  takenLoan(param0: Address): boolean {
    let result = super.call("takenLoan", "takenLoan(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_takenLoan(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("takenLoan", "takenLoan(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  token(): Address {
    let result = super.call("token", "token():(address)", []);

    return result[0].toAddress();
  }

  try_token(): ethereum.CallResult<Address> {
    let result = super.tryCall("token", "token():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalParticipants(): BigInt {
    let result = super.call(
      "totalParticipants",
      "totalParticipants():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalParticipants(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalParticipants",
      "totalParticipants():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _maximumBidAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _minimumBidAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _auctionInterval(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _auctionDuration(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _maxParticipants(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _token(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BidCall extends ethereum.Call {
  get inputs(): BidCall__Inputs {
    return new BidCall__Inputs(this);
  }

  get outputs(): BidCall__Outputs {
    return new BidCall__Outputs(this);
  }
}

export class BidCall__Inputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }

  get bidAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BidCall__Outputs {
  _call: BidCall;

  constructor(call: BidCall) {
    this._call = call;
  }
}

export class ClaimFinalYieldCall extends ethereum.Call {
  get inputs(): ClaimFinalYieldCall__Inputs {
    return new ClaimFinalYieldCall__Inputs(this);
  }

  get outputs(): ClaimFinalYieldCall__Outputs {
    return new ClaimFinalYieldCall__Outputs(this);
  }
}

export class ClaimFinalYieldCall__Inputs {
  _call: ClaimFinalYieldCall;

  constructor(call: ClaimFinalYieldCall) {
    this._call = call;
  }
}

export class ClaimFinalYieldCall__Outputs {
  _call: ClaimFinalYieldCall;

  constructor(call: ClaimFinalYieldCall) {
    this._call = call;
  }
}

export class ClaimLoanCall extends ethereum.Call {
  get inputs(): ClaimLoanCall__Inputs {
    return new ClaimLoanCall__Inputs(this);
  }

  get outputs(): ClaimLoanCall__Outputs {
    return new ClaimLoanCall__Outputs(this);
  }
}

export class ClaimLoanCall__Inputs {
  _call: ClaimLoanCall;

  constructor(call: ClaimLoanCall) {
    this._call = call;
  }
}

export class ClaimLoanCall__Outputs {
  _call: ClaimLoanCall;

  constructor(call: ClaimLoanCall) {
    this._call = call;
  }
}

export class ParticipateCall extends ethereum.Call {
  get inputs(): ParticipateCall__Inputs {
    return new ParticipateCall__Inputs(this);
  }

  get outputs(): ParticipateCall__Outputs {
    return new ParticipateCall__Outputs(this);
  }
}

export class ParticipateCall__Inputs {
  _call: ParticipateCall;

  constructor(call: ParticipateCall) {
    this._call = call;
  }
}

export class ParticipateCall__Outputs {
  _call: ParticipateCall;

  constructor(call: ParticipateCall) {
    this._call = call;
  }
}
